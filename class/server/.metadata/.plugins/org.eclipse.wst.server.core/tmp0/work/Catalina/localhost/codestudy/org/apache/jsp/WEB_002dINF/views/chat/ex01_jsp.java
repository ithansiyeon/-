/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.56
 * Generated at: 2020-08-18 05:53:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.chat;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex01_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/views/inc/asset.jsp", Long.valueOf(1596172891774L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title></title>\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<link rel=\"stylesheet\" href=\"/codestudy/node_modules/bootstrap/dist/css/bootstrap.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/codestudy/css/main.css\">\r\n");
      out.write("<link rel=\"shortcut icon\" href=\"/codestudy/images/favicon.ico\">\r\n");
      out.write("\r\n");
      out.write("<script src=\"/codestudy/node_modules/jquery/dist/jquery.js\"></script>\r\n");
      out.write("<script src=\"/codestudy/node_modules/bootstrap/dist/js/bootstrap.js\"></script>");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class = \"container\">\r\n");
      out.write("\t\t<h1>WebSocket</h1>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!-- \r\n");
      out.write("\t\t\t웹클라이언트 <-> (통신) <-> 웹서버\r\n");
      out.write("\t\t\t1. 브라우저 <-> 서버\r\n");
      out.write("\t\t\t\t- 일반적인 요청 + 응답\r\n");
      out.write("\t\t\t\t- 링크, <form> 등등..\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t2. 자바스크립트 객체 <-> 서버\r\n");
      out.write("\t\t\t\ta. Ajax(요청이 있어야 서버가 보낼 수 있어) 타이머를 돌려서 클라언트가 요청을 반복해서 해\r\n");
      out.write("\t\t\t\tb. WebSocket(Java 소켓(네트워크) + 스레드) (지속)\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t \r\n");
      out.write("\t\t -->\r\n");
      out.write("\t\t <input type = \"button\" id = \"btn1\" value = \"클릭\">\r\n");
      out.write("\t\t <div id = \"output\"></div>\r\n");
      out.write("\t\t \r\n");
      out.write("\t\t <hr>\r\n");
      out.write("\t\t \r\n");
      out.write("\t\t <input type = \"button\" id = \"btn2\" value = \"연결하기\">\r\n");
      out.write("\t\t <input type = \"button\" id = \"btn3\" value = \"종료하기\" disabled>\r\n");
      out.write("\t\t <br>\r\n");
      out.write("\t\t <input type = \"text\" id = \"message\" disabled>\r\n");
      out.write("\t\t <div id = \"output2\"></div>\r\n");
      out.write("\t\t \r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar url = \"ws://echo.websocket.org\";\r\n");
      out.write("\t\tvar ws;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction print(msg){\r\n");
      out.write("\t\t\t$(\"#output2\").append(\"<div>[\"+(new Date()).toLocaleTimeString()+\"] \"+msg+\"</div>\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t$(\"#btn2\").click(function(){\r\n");
      out.write("\t\t\t//웹 소켓 + 서버 접속 \r\n");
      out.write("\t\t\tws = new WebSocket(url); // *****\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tws.onopen = function(evt){\r\n");
      out.write("\t\t\t\tprint(\"연결되었습니다.\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#btn2\").attr(\"disabled\",true);\r\n");
      out.write("\t\t\t\t$(\"#btn3\").attr(\"disabled\",false);\r\n");
      out.write("\t\t\t\t$(\"#message\").attr(\"disabled\",false);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tws.onclose = function(evt){\r\n");
      out.write("\t\t\t\tprint(\"종료되었습니다.\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#btn2\").attr(\"disabled\",false);\r\n");
      out.write("\t\t\t\t$(\"#btn3\").attr(\"disabled\",true);\r\n");
      out.write("\t\t\t\t$(\"#message\").attr(\"disabled\",true);\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tws.onmessage = function(evt){\r\n");
      out.write("\t\t\t\tprint(\"응답받는 데이터 : \" +evt.data);\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tws.onerror = function(evt){\r\n");
      out.write("\t\t\t\tconsole.log(evt.data);\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#btn3\").click(function(){\r\n");
      out.write("\t\t\tws.close(); // ****\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#message\").keyup(function(){\r\n");
      out.write("\t\t\tif(event.keyCode == 13) {\r\n");
      out.write("\t\t\t\t//에코서버에 메시지를 전달하기 \r\n");
      out.write("\t\t\t\tws.send($(this).val());\r\n");
      out.write("\t\t\t\t$(this).val(\"\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\r\n");
      out.write("\t\t$(\"#btn1\").click(function(){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//웹소켓 -> 서버와 통신 \r\n");
      out.write("\t\t\t//1. 소켓 생성\r\n");
      out.write("\t\t\t//2. 서버 접속\r\n");
      out.write("\t\t\t//3. 통신\r\n");
      out.write("\t\t\t//4. 서버 접속 종료\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//웹소켓 테스트용 서버\r\n");
      out.write("\t\t\tvar url = \"ws://echo.websocket.org\";\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//웹소켓 생성 + 서버 접속\r\n");
      out.write("\t\t\tvar ws = new WebSocket(url); // ****\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//비동기(이벤트)\r\n");
      out.write("\t\t\tws.onopen = function(evt){\r\n");
      out.write("\t\t\t\tconsole.log(\"서버와 연결되었습니다.\");\r\n");
      out.write("\t\t\t\tws.send(\"Hello\"); // 클라이언트 -> 서버, 메시지 응답\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tws.onmessage = function(evt){\r\n");
      out.write("\t\t\t\t// 서버 -> 클라이언트\r\n");
      out.write("\t\t\t\tconsole.log(\"서버측에서 클라이언트에게 메시지를 보냈습니다.\");\r\n");
      out.write("\t\t\t\tconsole.log(evt.data);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//소켓 연결 종료\r\n");
      out.write("\t\t\t\tws.close();\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tws.onclose = function(evt){\r\n");
      out.write("\t\t\t\tconsole.log(\"서버와 연결이 종료되었습니다.\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tws.onerror = function(evt){\r\n");
      out.write("\t\t\t\tconsole.log(\"error\",evt.data);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
